import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import React from 'react';
import usePokemonDetailData from '@/components/PokemonInfo/hooks/usePokemonDetailData';
import PokemonInfo from '@/components/PokemonInfo/PokemonInfo';
import { pokemonKeys } from '@/const/queries';
import FetchPokemon from '@/services/FetchPokemon';
import commonServerSiderProps from '@/utils/commonServerSiderProps';

const PokemonDetail = () => {
  const { data } = usePokemonDetailData();
  console.log(data);

  if (!data) return null;

  return (
    <>
      <Head>
        <title>포켓몬 도감 - {data.responseData.name || ''} 의 정보</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PokemonInfo>
        <PokemonInfo.Title>
          {data.responseData.id}. {data.responseData.name || ''}
        </PokemonInfo.Title>
        <PokemonInfo.Profile sprites={data.responseData.sprites} />
        <PokemonInfo.Paragraph>
          무게 : {data.responseData.weight}hg
        </PokemonInfo.Paragraph>
        <PokemonInfo.Paragraph>
          키 : {data.responseData.height}cm
        </PokemonInfo.Paragraph>
        <PokemonInfo.Paragraph>
          타입 :&nbsp;
          {data.responseData.types.map((type) => type.type.name).join(', ')}
        </PokemonInfo.Paragraph>
        <PokemonInfo.Paragraph>
          특성 :&nbsp;
          {data.responseData.abilities
            .map((ability) => ability.ability.name)
            .join(', ')}
        </PokemonInfo.Paragraph>
        <PokemonInfo.Paragraph>
          스텟 :&nbsp;
          {data.responseData.stats
            .map((stat) => `${stat.stat.name}(${stat.base_stat})`)
            .join(', ')}
        </PokemonInfo.Paragraph>
        <PokemonInfo.Paragraph>
          획득 가능 경험치 :&nbsp;
          {data.responseData.base_experience}
        </PokemonInfo.Paragraph>

        <PokemonInfo.Preformatted>
          가진 아이템 :&nbsp;
          <code>{JSON.stringify(data.responseData.held_items, null, 2)}</code>
        </PokemonInfo.Preformatted>
        <PokemonInfo.Paragraph>
          past_types :&nbsp;
          {data.responseData.past_types
            .map((type) => type.types.map((elem) => elem.type.name))
            .join(', ')}
        </PokemonInfo.Paragraph>
        <PokemonInfo.Paragraph>
          기술 :&nbsp;
          {data.responseData.moves.map((move) => move.move.name).join(', ')}
        </PokemonInfo.Paragraph>
        <PokemonInfo.Preformatted>
          {/* <code>{JSON.stringify(data.responseData.moves, null, 2)}</code> */}
        </PokemonInfo.Preformatted>
        <PokemonInfo.Paragraph>
          등장 시리즈 (포켓몬 게임) :&nbsp;
          {data.responseData.game_indices
            .map((game) => game.version.name)
            .join(', ')}
        </PokemonInfo.Paragraph>
        <PokemonInfo.Paragraph>
          종족 :&nbsp;
          {data.responseData.species.name}
        </PokemonInfo.Paragraph>
      </PokemonInfo>
    </>
  );
};

export const getServerSideProps = commonServerSiderProps([
  {
    key: [pokemonKeys.detail],
    callback: (context: GetServerSidePropsContext) => {
      const { id } = context.query;
      return FetchPokemon.pokemon({
        pathParam: Array.isArray(id) ? id.join('') : id,
      });
    },
    fetchMode: 'NORMAL',
  },
]);

export default PokemonDetail;
